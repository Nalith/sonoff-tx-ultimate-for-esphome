packages:
  remote_package:
    url: https://github.com/Nalith/sonoff-tx-ultimate-for-esphome
    ref: main # optional
    files: [tx_ultimate_us_substitutions.yaml, tx_ultimate_us_base.yaml]
    refresh: 1s

substitutions:
  relay_count: "2"

esphome:
  name: ${name}
  friendly_name: ${friendly_name}
  project:
    name: smarthomeyourself.tx_ultimate
    version: "1.0"

  on_boot:
    priority: -100
    then:
      - binary_sensor.template.publish:
          id: touchfield_1
          state: OFF
      - binary_sensor.template.publish:
          id: touchfield_2
          state: OFF
#      - binary_sensor.template.publish:
#          id: touchfield_3
#          state: OFF
      - binary_sensor.template.publish:
          id: multi_touch
          state: OFF
      - binary_sensor.template.publish:
          id: swipe_up
          state: OFF
      - binary_sensor.template.publish:
          id: swipe_down
          state: OFF
      - binary_sensor.template.publish:
          id: long_press
          state: OFF
      - script.execute: refresh_led_default
      - script.execute: refresh_nightlight

#dashboard_import:
  #package_import_url: github://Nalith/sonoff-tx-ultimate-for-esphome/tx_ultimate.yaml@main
  #import_full_config: false

binary_sensor:
  - platform: template
    name: "Touchfield 1"
    id: touchfield_1
    on_press:
      - if:
          condition:
            lambda: "return ${toggle_relay_1_on_touch};"
          then:
            - switch.toggle: relay_1
      - delay: ${button_on_time}
      - binary_sensor.template.publish:
          id: touchfield_1
          state: OFF
      - script.execute: refresh_led_default

  - platform: template
    name: "Touchfield 2"
    id: touchfield_2
    on_press:
      - if:
          condition:
            lambda: "return ${toggle_relay_2_on_touch};"
          then:
            - switch.toggle: relay_2
      - delay: ${button_on_time}
      - binary_sensor.template.publish:
          id: touchfield_2
          state: OFF
      - script.execute: refresh_led_default

#  - platform: template
#    name: "Touchfield 3"
#    id: touchfield_3
#    on_press:
#      - if:
#          condition:
#            lambda: "return ${toggle_relay_3_on_touch};"
#          then:
#            - switch.toggle: relay_3
#      - delay: ${button_on_time}
#      - binary_sensor.template.publish:
#          id: touchfield_3
#          state: OFF
#      - script.execute: refresh_led_default

switch:
  - platform: gpio
    id: relay_1
    name: "${friendly_name} L1"
    pin: ${relay_1_pin}
    restore_mode: RESTORE_DEFAULT_OFF
    on_turn_on:
      then:
        - script.execute: refresh_led_default
    on_turn_off:
      then:
        - script.execute: refresh_led_default

  - platform: gpio
    id: relay_2
    name: "${friendly_name} L2"
    pin: ${relay_2_pin}
    restore_mode: RESTORE_DEFAULT_OFF
    on_turn_on:
      then:
        - script.execute: refresh_led_default
    on_turn_off:
      then:
        - script.execute: refresh_led_default

#  - platform: gpio
#    id: relay_3
#    name: "${friendly_name} L3"
#    pin: ${relay_3_pin}
#    restore_mode: RESTORE_DEFAULT_OFF
#    on_turn_on:
#      then:
#        - script.execute: refresh_led_default
#    on_turn_off:
#      then:
#        - script.execute: refresh_led_default


light:
  - platform: neopixelbus
    type: GRB
    variant: WS2811
    pin: ${led_pin}
    num_leds: 32
    name: "NeoPixel Light"
    id: leds
    default_transition_length: 0.7s
    effects:
      - addressable_rainbow:
          name: "Rainbow"
          speed: 30
          width: 8
      - pulse:
          name: "Pulse"
          transition_length: 1.4s
          update_interval: 1s
      - addressable_lambda:
          name: "Swipe Down Effect"
          update_interval: 100ms
          lambda: |-
            static int current_led = 0;
            // Turn off all LEDs
            it.all() = ESPColor(0, 0, 0);
            // Light up the current LED and its pair
            it[current_led] = ESPColor(255, 255, 255); // adjust color as needed
            it[23 - current_led] = ESPColor(255, 255, 255); // paired LED
            // Increment and wrap around
            current_led = (current_led + 1) % 9;             

    on_turn_off:
      then:
        - script.execute: refresh_led_default

  - platform: partition
    name: "LEDs Button 1"
    id: leds_button_1
    internal: true
    segments:
      - id: leds
        from: 31
        to: 31
      - id: leds
        from: 0
        to: 3
      - id: leds
        from: 20
        to: 24

  - platform: partition
    name: "LEDs Button 2"
    id: leds_button_2
    internal: true
    segments:
      - id: leds
        from: 4
        to: 8
      - id: leds
        from: 15
        to: 19        

  - platform: partition
    name: "LEDs Nightlight"
    id: leds_nightlight
    internal: true
    segments:
      - id: leds
        from: 0
        to: 31

  - platform: partition
    name: "LEDs Top"
    id: leds_top
    internal: true
    segments:
      - id: leds
        from: 31
        to: 31
      - id: leds
        from: 0
        to: 8
    effects:
      - addressable_scan:
          name: "Scan"
      - addressable_rainbow:
          name: "Rainbow"
          speed: 10
          width: 20
  - platform: partition
    name: "Swipe Down"
    id: leds_left_and_right
    internal: true
    segments:
      - id: leds
        from: 0
        to: 8
      - id: leds
        from: 15
        to: 23
    effects:
      - addressable_scan:
          name: "Scan"
      - addressable_rainbow:
          name: "Rainbow"
          speed: 10
          width: 20
      - addressable_lambda:
          name: "Swipe Down Effect"
          update_interval: 100ms
          lambda: |-
            static int current_led = 0;
            // Turn off all LEDs
            it.all() = ESPColor(0, 0, 0);
            // Light up the current LED and its pair
            it[current_led] = ESPColor(255, 255, 255); // adjust color as needed
            it[23 - current_led] = ESPColor(255, 255, 255); // paired LED
            // Increment and wrap around
            current_led = (current_led + 1) % 9;              

media_player:
  - platform: i2s_audio
    id: media_out
    name: ${friendly_name} Player
    dac_type: external
    i2s_dout_pin: ${audio_sdata_pin}
    i2s_audio_id: audio_i2s
    i2s_comm_fmt: lsb
    mode: mono

i2s_audio:
  id: audio_i2s
  i2s_lrclk_pin: ${audio_lrclk_pin}
  i2s_bclk_pin: ${audio_bclk_pin}

script:
  - id: refresh_nightlight
    mode: restart
    then:
      - if:
          condition:
            lambda: 'return "${nightlight}" == "on";'
          then:
            - if:
                condition:
                  - sun.is_below_horizon:
                then:
                  - switch.turn_on:
                      id: nightlight
                else:
                  - switch.turn_off:
                      id: nightlight

  - id: refresh_led_default
    mode: restart
    then:
     # - light.turn_off: leds_top

      - if:
          condition:
            lambda: "return (id(relay_1).state) ;"
          then:
            - script.execute: led_on_button_1
          else:
            - script.execute: led_off_button_1

      - if:
          condition:
            lambda: "return (id(relay_2).state);"
          then:
            - script.execute: led_on_button_2
          else:
            - script.execute: led_off_button_2

#      - if:
          #condition:
            #lambda: "return id(nightlight).state || id(nightlight_active).state;"
          #then:
            #- script.execute: led_on_nightlight
          #else:
            #- light.turn_off: leds_nightlight

  - id: led_on_button_1
    mode: restart
    then:
      - light.turn_on:
          id: leds_button_1
          brightness: ${button_brightness}
          transition_length: 0.1s
          red: !lambda "return id(button_color)[0]/100.0;"
          green: !lambda "return id(button_color)[1]/100.0;"
          blue:  !lambda "return id(button_color)[2]/100.0;"

  - id: led_on_button_2
    mode: restart
    then:
      - light.turn_on:
          id: leds_button_2
          brightness: ${button_brightness}
          transition_length: 0.1s
          red: !lambda "return id(button_color)[0]/100.0;"
          green: !lambda "return id(button_color)[1]/100.0;"
          blue:  !lambda "return id(button_color)[2]/100.0;"

  - id: led_off_button_1
    mode: restart
    then:
      - if:
          condition:
            lambda: "return id(nightlight).state || id(nightlight_active).state;"
          then:
            - light.turn_on:
                id: leds_button_1
                brightness: ${nightlight_brightness}
                transition_length: 0.1s
                red: !lambda "return id(nightlight_color)[0]/100.0;"
                green: !lambda "return id(nightlight_color)[1]/100.0;"
                blue:  !lambda "return id(nightlight_color)[2]/100.0;"
          else:
            - light.turn_off:
                id: leds_button_1
                transition_length: 0.1s

  - id: led_off_button_2
    mode: restart
    then:
      - if:
          condition:
            lambda: "return id(nightlight).state || id(nightlight_active).state;"
          then:
            - light.turn_on:
                id: leds_button_2
                brightness: ${nightlight_brightness}
                transition_length: 0.1s
                red: !lambda "return id(nightlight_color)[0]/100.0;"
                green: !lambda "return id(nightlight_color)[1]/100.0;"
                blue:  !lambda "return id(nightlight_color)[2]/100.0;"
          else:
            - light.turn_off:
                id: leds_button_2
                transition_length: 0.1s

  - id: led_on_nightlight
    mode: restart
    then:
      - light.turn_on:
          id: leds_nightlight
          brightness: ${nightlight_brightness}
          red: !lambda "return id(nightlight_color)[0]/100.0;"
          green: !lambda "return id(nightlight_color)[1]/100.0;"
          blue:  !lambda "return id(nightlight_color)[2]/100.0;"

#  - id: led_on_release
    #mode: restart
    #then:
      #- light.turn_off:
          #id: leds_top

  - id: led_on_touch
    mode: restart
    then:
      #- light.turn_on:
          #id: leds_top
          #brightness: ${touch_brightness}
          #red: !lambda "return id(touch_color)[0]/100.0;"
          #green: !lambda "return id(touch_color)[1]/100.0;"
          #blue:  !lambda "return id(touch_color)[2]/100.0;"
          #effect: ${touch_effect}
      #- delay: 6s
      - script.execute: refresh_led_default

  - id: led_on_swipe_up
    mode: restart
    then:
      - light.turn_on:
          id: leds_top
          brightness: ${swipe_up_brightness}
          red: !lambda "return id(swipe_up_color)[0]/100.0;"
          green: !lambda "return id(swipe_up_color)[1]/100.0;"
          blue:  !lambda "return id(swipe_up_color)[2]/100.0;"
          effect: ${swipe_up_effect}

  - id: led_on_swipe_down
    mode: restart
    then:
      - light.turn_on:
          id: leds_left_and_right
          brightness: ${swipe_down_brightness}
          red: !lambda "return id(swipe_down_color)[0]/100.0;"
          green: !lambda "return id(swipe_down_color)[1]/100.0;"
          blue:  !lambda "return id(swipe_down_color)[2]/100.0;"
          effect: ${swipe_down_effect}

  - id: led_on_full_touch
    mode: restart
    then:
      - light.turn_on:
          id: leds_top
          brightness: ${multi_touch_brightness}
          red: !lambda "return id(multi_touch_color)[0]/100.0;"
          green: !lambda "return id(multi_touch_color)[1]/100.0;"
          blue:  !lambda "return id(multi_touch_color)[2]/100.0;"
          effect: ${multi_touch_effect}


  - id: led_on_long_touch
    mode: restart
    then:
      - light.turn_on:
          id: leds_top
          brightness: ${long_press_brightness}
          red: !lambda "return id(long_press_color)[0]/100.0;"
          green: !lambda "return id(long_press_color)[1]/100.0;"
          blue:  !lambda "return id(long_press_color)[2]/100.0;"
          effect: ${long_press_effect}


  - id: handle_release
    mode: restart
    parameters:
      pos: int
    then:
      - if:
          condition:
            lambda: "return ${relay_count}==1;"
          then:
            - binary_sensor.template.publish:
                id: touchfield_1
                state: ON

      - if:
          condition:
            lambda: "return ${relay_count}==2;"
          then:
            - if:
                condition:
                  lambda: "return pos <= 5;"
                then:
                  - binary_sensor.template.publish:
                      id: touchfield_1
                      state: ON

                else:
                  - binary_sensor.template.publish:
                      id: touchfield_2
                      state: ON
  - id: touch_led_marker
    mode: restart
    parameters:
      state: int
      pos: int
    then:
      - if:
          condition:
            lambda: "return state==1;"
          then:
            # RELEASE
            - light.turn_off: leds

          else:
            - if:
                condition:
                  lambda: "return state==2;"
                then:
                  # TOUCH
                  - light.turn_on:
                      id: leds
                      red: 1
                      green: 0
                      blue: 0
                  - delay: 6s
                  - light.turn_off: leds

                else:
                  - if:
                      condition:
                        lambda: "return state==11;"
                      then:
                        # FULL-TOUCH RELEASE
                        - light.turn_on:
                            id: leds
                            effect: "Rainbow"
                        - delay: 1s
                        - light.turn_off: leds

                      else:
                        # SWIPE
                        - if:
                            condition:
                              lambda: "return state==13;"
                            then:
                              # SWIPE UP
                              - light.turn_on:
                                  id: leds
                                  red: 0
                                  green: 1
                                  blue: 0

                        - if:
                            condition:
                              lambda: "return state==12;"
                            then:
                              # SWIPE DOWN
                              - light.turn_on:
                                  id: leds
                                  red: 0
                                  green: 0
                                  blue: 1
                        - delay: 1s
                        - light.turn_off: leds

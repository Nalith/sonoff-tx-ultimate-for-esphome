#packages:
  #remote_package:
    #url: https://github.com/Nalith/sonoff-tx-ultimate-for-esphome
    #ref: main # optional
    #files: [tx_ultimate_us_substitutions.yaml]
    #refresh: 1s

esp32:
  board: esp32dev
  framework:
    type: arduino

logger:
#  hardware_uart: UART2
  level: DEBUG
  logs:
    binary_sensor: INFO
    light: INFO
    script: DEBUG
    switch: INFO
    tx_ultimate_touch: INFO
    uart_debug: INFO

api:

ota:

wifi:
  ap:
    password: "12345678"
    
improv_serial:

captive_portal:

external_components:
#  - source: /config/esphome/my_components
  - source:
      type: git
      url: https://github.com/Nalith/sonoff-tx-ultimate-for-esphome
      ref: main
    components: [tx_ultimate_touch_us]
    refresh: 1s

globals:
  - id: nightlight_color
    type: int [3]
    restore_value: no
    initial_value: ${nightlight_color}
  - id: button_color
    type: int [3]
    restore_value: no
    initial_value: ${button_color}
  - id: long_press_color
    type: int [3]
    restore_value: no
    initial_value: ${long_press_color}
  - id: multi_touch_color
    type: int [3]
    restore_value: no
    initial_value: ${multi_touch_color}
  - id: swipe_up_color
    type: int [3]
    restore_value: no
    initial_value: ${swipe_up_color}
  - id: swipe_down_color
    type: int [3]
    restore_value: no
    initial_value: ${swipe_down_color}
  - id: touch_color
    type: int [3]
    restore_value: no
    initial_value: ${touch_color}    

#media_player:
  #- platform: i2s_audio
    #id: media_out
    #name: ${friendly_name} Player
    #dac_type: external
    #i2s_dout_pin: ${audio_sdata_pin}
    #i2s_audio_id: audio_i2s
    #i2s_comm_fmt: lsb
    #mode: stereo

#i2s_audio:
  #id: audio_i2s
  #i2s_lrclk_pin: ${audio_lrclk_pin}
  #i2s_bclk_pin: ${audio_bclk_pin}

uart:
  tx_pin: ${uart_tx_pin}
  rx_pin: ${uart_rx_pin}
  id: my_uart
  baud_rate: 115200
  data_bits: 8
  stop_bits: 1
  parity: NONE
  debug:
    direction: RX
    dummy_receiver: false
    after:
      timeout: 2s
      bytes: 2048
    sequence:
      - lambda: UARTDebug::log_hex(direction, bytes, ' ');

time:
  - platform: homeassistant
  - platform: sntp
    on_time:
      # Every 5 minutes
      - seconds: 0
        minutes: /5
        then:
          - script.execute: refresh_nightlight

sun:
  latitude: ${latitude}
  longitude: ${longitude}

binary_sensor:
  - platform: template
    name: "Swipe Up"
    id: swipe_up
    on_press:
      - delay: ${button_on_time}
      - binary_sensor.template.publish:
          id: swipe_up
          state: OFF
      - script.execute: refresh_led_default

  - platform: template
    name: "Swipe Down"
    id: swipe_down
    on_press:
      - delay: ${button_on_time}
      - binary_sensor.template.publish:
          id: swipe_down
          state: OFF
      - script.execute: refresh_led_default

  - platform: template
    name: "Multi Touch"
    id: multi_touch
    on_press:
      - delay: ${button_on_time}
      - binary_sensor.template.publish:
          id: multi_touch
          state: OFF
      - script.execute: refresh_led_default

  - platform: template
    name: "Long Press"
    id: long_press
    on_press:
      - delay: ${button_on_time}
      - binary_sensor.template.publish:
          id: long_press
          state: OFF
      - script.execute: refresh_led_default

switch:
  - platform: gpio
    id: vibra
    pin: ${vibra_motor_pin}
    name: "${friendly_name} Vibration"
    restore_mode: ALWAYS_OFF
    on_turn_on:
      - delay: ${vibra_time}
      - switch.turn_off: vibra

  - platform: gpio
    id: pa_power
    pin: ${pa_power_pin}
    name: "PA Power"
    internal: true
    restore_mode: ALWAYS_ON

  - platform: gpio
    name: "touch panel power"
    pin:
      number: ${touchpanel_power_pin}
      inverted: true
    id: touch_power
    internal: true
    restore_mode: RESTORE_DEFAULT_ON

  - platform: template
    name: "Nightlight"
    id: nightlight
    internal: true
    optimistic: true
    restore_mode: RESTORE_DEFAULT_OFF
    on_turn_on:
      then:
        - script.execute: refresh_led_default
    on_turn_off:
      then:
        - script.execute: refresh_led_default

  - platform: template
    name: "Nightlight"
    id: nightlight_active
    optimistic: true
    restore_mode: RESTORE_DEFAULT_OFF
    on_turn_on:
      then:
        - script.execute: refresh_led_default
    on_turn_off:
      then:
        - script.execute: refresh_led_default

  - platform: restart
    name: "${friendly_name} Restart"

tx_ultimate_touch_us:
  id: tx_touch
  uart: my_uart

  on_press:
    - script.execute: led_on_touch
    - lambda: >
        ESP_LOGD("tx_ultimate_touch.on_press", "Touch Position: %d / State: %d", touch.x, touch.state);

  on_release:
    - script.execute:
        id: handle_release
        pos: !lambda "return touch.x;"

    - switch.turn_on: vibra

    - lambda: >
        ESP_LOGD("tx_ultimate_touch.on_release", "Release Position: %d / State: %d", touch.x, touch.state);

  on_swipe_up:
    - script.execute: led_on_swipe_up

    - switch.turn_on: vibra

    - binary_sensor.template.publish:
        id: swipe_up
        state: ON

    - lambda: >
        ESP_LOGD("tx_ultimate_touch.on_swipe_up", "Swipe Up Position: %d / State: %d", touch.x, touch.state);

  on_swipe_down:
    - script.execute: led_on_swipe_down

    - switch.turn_on: vibra

    - binary_sensor.template.publish:
        id: swipe_down
        state: ON

    - lambda: >
        ESP_LOGD("tx_ultimate_touch.on_swipe_down", "Swipe Down Position: %d / State: %d", touch.x, touch.state);

  on_full_touch_release:
    - script.execute: led_on_full_touch

    - switch.turn_on: vibra

    - binary_sensor.template.publish:
        id: multi_touch
        state: ON

    - lambda: >
        ESP_LOGD("tx_ultimate_touch.on_full_touch_release", "Full Touch Release Position: %d / State: %d", touch.x, touch.state);

  on_long_touch_release:
    - script.execute: led_on_long_touch

    - switch.turn_on: vibra

    - binary_sensor.template.publish:
        id: long_press
        state: ON

    - lambda: >
        ESP_LOGD("tx_ultimate_touch.on_long_touch_release", "Long Touch Release Position: %d / State: %d", touch.x, touch.state);    
